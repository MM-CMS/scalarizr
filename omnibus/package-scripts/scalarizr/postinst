#!/bin/bash
#
# Perform necessary scalarizr setup steps
# after package is installed.
#
# Scripts order
# rpm: http://fedoraproject.org/wiki/Packaging:ScriptletSnippets
# deb: https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html

PROGNAME='scalarizr'
INSTALL_DIR='/opt/scalarizr'
ETC_DIR='/etc/scalr'
if which apt-get 2>&1 >/dev/null; then
    DIST='debian'
else
    DIST='redhat'
fi

function error_exit {
    echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
    exit 1
}

function debian_init {
    if which insserv > /dev/null && test -e /etc/issue.net && ! grep -q 'Ubuntu' /etc/issue.net; then
        insserv -r scalarizr_update 2>&1 >/dev/null || :
        rm -f /etc/init.d/scalarizr_update
        insserv -r scalarizr
        insserv scalarizr
        insserv scalr-upd-client
    else
        rm -f /etc/init.d/scalarizr_update
        update-rc.d scalarizr_update remove || :
        update-rc.d -f scalarizr remove || :
        if test -e /etc/issue.net && grep -q '10.04' /etc/issue.net; then
            # We've reverted back scalarizr autostart because 
            # some clients have scalarizr bundled without scalr-upd-client,
            # and Ubuntu 10.04 init doesn't execute new init scripts, 
            # that was installed during init
            update-rc.d scalarizr defaults 99 >/dev/null
        else
            update-rc.d scalarizr stop 99 0 1 6 .
        fi
        update-rc.d scalr-upd-client defaults 98 >/dev/null
    fi 
}

function redhat_init {
    for service in scalarizr scalr-upd-client; do
        /sbin/chkconfig --del $service || :
        /sbin/chkconfig --add $service
        chmod +x /etc/init.d/$service
    done
}

function safe_restart {
    zomby_pids=$(ps aux | grep 'bin/scalarizr' | awk '{ print $2 }')
    if [ "$zomby_pids" ]; then
        for zomby_pid in $zomby_pids; do
            kill -9 $zomby_pid 2>/dev/null
        done
    fi

    if [ -f "/tmp/scalarizr.status" ]; then
        status=$(cat /tmp/scalarizr.status)
        rm -f "/tmp/scalarizr.status"
        if [ "0" = "$status" ]; then
            /etc/init.d/scalarizr start || exit $?
        fi
    else
        if [ -f "$ETC_DIR/private.d/.state" ]; then
            /etc/init.d/scalarizr start || exit $?
        fi
    fi
}

function link_to {
    test -e $1 && unlink $1
    ln -s $2 $1
}

# sync configuration files
test -e $ETC_DIR || mkdir -p $ETC_DIR
$INSTALL_DIR/embedded/bin/rsync -aq $ETC_DIR/ $INSTALL_DIR/etc
$INSTALL_DIR/embedded/bin/rsync -avq $INSTALL_DIR/etc/ $ETC_DIR

# update symlinks
for name in $(ls $INSTALL_DIR/bin); do
    link_to /usr/bin/$name "$INSTALL_DIR/bin/$name"
done
for name in $(ls $INSTALL_DIR/init/$DIST); do
    link_to /etc/init.d/$name "$INSTALL_DIR/init/$DIST/$name"
    chmod +x /etc/init.d/$name
done
pushd .
cd $ETC_DIR/public.d
[ ! -f percona.ini ] && ln -s mysql2.ini percona.ini
[ ! -f mariadb.ini ] && ln -s mysql2.ini mariadb.ini
[ ! -f idcf.ini ] && ln -s cloudstack.ini idcf.ini 
[ ! -f ucloud.ini ] && ln -s cloudstack.ini ucloud.ini 
popd

# update init scripts symlinks
if [ "$DIST" = 'debian' ]; then
    debian_init
else
    redhat_init
fi

safe_restart

echo "Thank you for installing ${PROGNAME}!"

exit 0
